mqtt:
  host: host.docker.internal
  port: 1883
  # user: mosquitto
  # password: 1234
cameras:
  webcam:
    rtmp:
      enabled: False
    ffmpeg:
      inputs:
        - path: /dev/video0
          input_args: -f v4l2 -avoid_negative_ts make_zero -fflags +genpts+discardcorrupt -use_wallclock_as_timestamps 1
          roles:
            - detect
            # - rtmp
            - record
      output_args:
        # rtmp: -vf transpose=2,transpose=2 -c:v libx264 -preset ultrafast -tune zerolatency -b:v 600k -f flv
        # record: -vf transpose=2,transpose=2 -c:v libx264 -preset ultrafast -tune zerolatency -b:v 600k -f segment -segment_time 10 -segment_format mp4 -reset_timestamps 1 -strftime 1 -an
        record: -f rawvideo -pix_fmt yuv420p
        detect: -f rawvideo -pix_fmt yuv420p
      # output_args:
      #   detect: -f rawvideo -pix_fmt yuv420p
    detect:
      width: 1280
      height: 720
      fps: 5
      max_disappeared: 10
    mqtt:
      # Optional: Enable publishing snapshot via mqtt for camera (default: shown below)
      # NOTE: Only applies to publishing image data to MQTT via 'frigate/<camera_name>/<object_name>/snapshot'.
      # All other messages will still be published.
      enabled: True
      # Optional: print a timestamp on the snapshots (default: shown below)
      timestamp: False
      # Optional: draw bounding box on the snapshots (default: shown below)
      bounding_box: False
      # Optional: crop the snapshot (default: shown below)
      crop: False
      # Optional: height to resize the snapshot to (default: shown below)
      height: 720
      # Optional: jpeg encode quality (default: shown below)
      quality: 90
snapshots: 
  enabled: True
  timestamp: False
  bounding_box: False
      # bounding_box: True
      # crop:
      #   False


